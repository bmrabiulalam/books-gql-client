{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","reportWebVitals.js","index.js"],"names":["AUTHORS","gql","BOOKS","addBookMutation","getBookQuery","BookDetails","bookId","useQuery","variables","id","loading","error","data","message","book","name","genre","author","className","books","map","BookList","useState","selected","setSelected","onClick","e","AddBook","authorId","bookInfo","setBookInfo","useMutation","refetchQueries","query","createLink","action","onSubmit","preventDefault","type","onChange","target","value","disabled","authors","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"kNAEaA,EAAUC,YAAH,mGASPC,EAAQD,YAAH,8FAULE,EAAkBF,YAAH,yPAafG,EAAeH,YAAH,8T,OCLVI,MAzBf,YAAkC,IAAXC,EAAU,EAAVA,OACnB,EAAiCC,YAASH,EAAc,CAAEI,UAAW,CAAEC,GAAIH,KAAnEI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OAAO,2CACpB,GAAIC,EAAO,MAAM,UAAN,OAAiBA,EAAME,SAElC,IAAQC,EAASF,EAATE,KAER,OACI,gCACI,6BAAKA,EAAKC,OACV,4BAAID,EAAKE,QACT,4BAAIF,EAAKG,OAAOF,OAChB,0DACA,oBAAIG,UAAU,cAAd,SAEQJ,EAAKG,OAAOE,MAAMC,KAAI,SAAAN,GAAI,OACtB,6BAAmBA,EAAKC,MAAfD,EAAKL,aCevBY,MA/Bf,WACE,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCjB,YAASL,GAAlCQ,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,EAAgB,2CAChBC,EAAa,UAAN,OAAiBA,EAAME,SAGhC,gCACE,oBAAIJ,GAAG,YAAP,SAEIG,EAAKO,MAAMC,KAAI,SAAAN,GAAI,OACjB,oBAAkBW,QAAS,SAAAC,GAAOF,EAAYV,EAAKL,KAAnD,SACGK,EAAKC,MADCD,EAAKL,SAMpB,qBAAKA,GAAG,eAAR,SAEIc,EAEE,cAAC,EAAD,CAAajB,OAAQiB,IAErB,0D,gBCgCGI,MAzDf,WACI,MAAgCL,mBAAS,CACrCP,KAAM,GACNC,MAAO,GACPY,SAAU,KAHd,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,EAAiCvB,YAASP,GAAlCU,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,EAAqBmB,YAAY5B,EAAiB,CAC9CK,UAAW,CACPO,KAAMc,EAASd,KACfC,MAAOa,EAASb,MAChBY,SAAUC,EAASD,UAEvBI,eAAgB,CAAC,CAAEC,MAAO/B,MANvBgC,EAAP,oBAcA,OAAIvB,EAAc,yCAGd,uBAAMwB,OAAO,GAAG1B,GAAG,WAAW2B,SARf,SAAAV,GACfA,EAAEW,iBACFH,KAMA,UACI,sBAAKhB,UAAU,QAAf,UACI,8CACA,uBAAOoB,KAAK,OAAOC,SAAU,SAACb,GAAD,OAAOI,EAAY,2BAAKD,GAAN,IAAgBd,KAAMW,EAAEc,OAAOC,eAElF,sBAAKvB,UAAU,QAAf,UACI,0CACA,uBAAOoB,KAAK,OAAOC,SAAU,SAACb,GAAD,OAAOI,EAAY,2BAAKD,GAAN,IAAgBb,MAAOU,EAAEc,OAAOC,eAEnF,sBAAKvB,UAAU,QAAf,UACI,2CACA,yBAAQH,KAAK,GAAGN,GAAG,GAAG8B,SAAU,SAACb,GAAD,OAAOI,EAAY,2BAAKD,GAAN,IAAgBD,SAAUF,EAAEc,OAAOC,UAArF,UACI,wBAAQA,MAAM,GAAd,2BAEI/B,EAEI,wBAAQgC,UAAQ,EAAhB,gCAEA9B,EAAK+B,QAAQvB,KAAI,SAAAH,GAAM,OACnB,wBAAQwB,MAAOxB,EAAOR,GAAtB,SACKQ,EAAOF,MADmBE,EAAOR,aAO1D,2CC1CGmC,MAVf,WACE,OACE,sBAAK1B,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,IACA,cAAC,EAAD,QCGS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCORQ,EAAWC,YAAe,CAC9BC,IAAK,gDAIDC,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.7c15223a.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const AUTHORS = gql`\r\n  query GetAuthors {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BOOKS = gql`\r\nquery GetBooks {\r\n  books {\r\n    id\r\n    name\r\n    genre\r\n  }\r\n}\r\n`;\r\n\r\nexport const addBookMutation = gql`\r\n    mutation (\r\n        $name: String!,\r\n        $genre: String!,\r\n        $authorId: ID!\r\n      ) {\r\n        addBook(name: $name, genre: $genre, authorId: $authorId){\r\n            name\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const getBookQuery = gql`\r\n    query($id: ID!){\r\n        book(id: $id){\r\n            id\r\n            name\r\n            genre\r\n            author {\r\n                id\r\n                name\r\n                books {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getBookQuery } from '../queries/queries';\r\n\r\nfunction BookDetails({ bookId }) {\r\n    const { loading, error, data } = useQuery(getBookQuery, { variables: { id: bookId } });\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return `Error! ${error.message}`;\r\n\r\n    const { book } = data;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{book.name}</h2>\r\n            <p>{book.genre}</p>\r\n            <p>{book.author.name}</p>\r\n            <p>All books by this author:</p>\r\n            <ul className=\"other-books\">\r\n                {\r\n                    book.author.books.map(book => (\r\n                        <li key={book.id}>{book.name}</li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookDetails;\r\n","import React, { useState } from 'react';\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { BOOKS } from '../queries/queries';\r\nimport BookDetails from './BookDetails';\r\n\r\nfunction BookList() {\r\n  const [selected, setSelected] = useState(null);\r\n  const { loading, error, data } = useQuery(BOOKS);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <div>\r\n      <ul id=\"book-list\">\r\n        {\r\n          data.books.map(book => (\r\n            <li key={book.id} onClick={e => { setSelected(book.id) }}>\r\n              {book.name}\r\n            </li>)\r\n          )\r\n        }\r\n      </ul>\r\n      <div id=\"book-details\">\r\n        {\r\n          selected\r\n            ?\r\n            <BookDetails bookId={selected} />\r\n            :\r\n            <p>No book selected...</p>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookList;\r\n","import React, { useState } from 'react';\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { AUTHORS, addBookMutation, BOOKS } from '../queries/queries';\r\n\r\nfunction AddBook() {\r\n    const [bookInfo, setBookInfo] = useState({\r\n        name: '',\r\n        genre: '',\r\n        authorId: ''\r\n    });\r\n\r\n    const { loading, error, data } = useQuery(AUTHORS);\r\n\r\n    const [createLink] = useMutation(addBookMutation, {\r\n        variables: {\r\n            name: bookInfo.name,\r\n            genre: bookInfo.genre,\r\n            authorId: bookInfo.authorId\r\n        },\r\n        refetchQueries: [{ query: BOOKS }]\r\n    });\r\n\r\n    const submitForm = e => {\r\n        e.preventDefault();\r\n        createLink();\r\n    }\r\n\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return (\r\n        <form action=\"\" id=\"add-book\" onSubmit={submitForm}>\r\n            <div className=\"field\">\r\n                <label>Book Name</label>\r\n                <input type=\"text\" onChange={(e) => setBookInfo({ ...bookInfo, name: e.target.value })} />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label>Genre</label>\r\n                <input type=\"text\" onChange={(e) => setBookInfo({ ...bookInfo, genre: e.target.value })} />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label>Author</label>\r\n                <select name=\"\" id=\"\" onChange={(e) => setBookInfo({ ...bookInfo, authorId: e.target.value })}>\r\n                    <option value=\"\">Select Author</option>\r\n                    {\r\n                        loading\r\n                            ?\r\n                            <option disabled>Loading Authors...</option>\r\n                            :\r\n                            data.authors.map(author => (\r\n                                <option value={author.id} key={author.id}>\r\n                                    {author.name}\r\n                                </option>)\r\n                            )\r\n                    }\r\n                </select>\r\n            </div>\r\n            <button>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddBook;\r\n","import React from 'react';\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Book List</h1>\n      <BookList />\n      <AddBook />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\n// 2\nconst httpLink = createHttpLink({\n  uri: 'https://books-gql-server.vercel.app/graphql'\n});\n\n// 3\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}